<?xml version="1.0" encoding="UTF-8"?>
<!-- author:Administrator -->
<sqlMap>
    <parameterMap class="commonj.sdo.DataObject" id="parameterMap">
        <parameter javaType="date" jdbcType="DATE" property="dateType"/>
    </parameterMap>
    <resultMap class="commonj.sdo.DataObject" id="resultMap">
        <result column="TYPEID" javaType="string" property="typeId"/>
    </resultMap>

    <select id="getEnterOutableDetail" parameterClass="java.util.HashMap" resultClass="commonj.sdo.DataObject"> 
		SELECT  b.ID as id, b.OUTABLE_QTY - IFNULL(E.SellQty, 0) AS outableQty,
				B.MAIN_ID as mainId, B.SOURCE_ID as sourceId, B.ROOT_ID as rootId, 
				B.STORE_ID as storeId, b.store_shelf as storeShelf, B.PART_ID as partId, B.PART_CODE as partCode, B.PART_NAME as partName,
				B.FULL_NAME as fullName, B.ENTER_UNIT_ID as enterUnitId, B.SYSTEM_UNIT_ID as systemUnitId,
				B.ENTER_QTY as enterQty, B.ENTER_PRICE as enterPrice,
				B.ENTER_AMT as enterAmt, B.OUTABLE_QTY as trueOutableQty, B.TAX_SIGN as taxSign,
				B.TAX_RATE as taxRate, B.TAX_PRICE as taxPrice, B.TAX_AMT as taxAmt,
				B.NO_TAX_PRICE as noTaxPrice, B.NO_TAX_AMT as noTaxAmt, B.TAX_DIFF as taxDiff,
				B.RTN_PRICE as rtnPrice, B.RTN_AMT as rtnAmt, B.ENTER_DATE as enterDate,
				B.PREV_DETAIL_ID as preDetailId, B.ORDER_DETAIL_ID as orderDetailId,
				B.ORDER_MAIN_ID as orderMainId, B.BRANCH_STOCK_AGE as branchStockAge,
				B.CHAIN_STOCK_AGE as chainStockAge, B.GUEST_ID as guestId,B.GUEST_NAME as guestName,
				B.REMARK as remark, b.origin_id as originId, b.origin_guest_id as originGuestId
		FROM
			PJ_ENTER_MAIN_CHK A
		INNER JOIN PJ_ENTER_DETAIL_CHK B ON A.ID = B.MAIN_ID
		LEFT JOIN (
			SELECT
				C.SOURCE_ID,
				SUM(C.SELL_QTY) AS SellQty
			FROM
				PJ_OUT_DETAIL C
			INNER JOIN PJ_OUT_MAIN D ON C.MAIN_ID = D.ID
			WHERE 1 = 1 and D.AUDIT_SIGN = 0
			
			<isNotNull prepend = "" property = "orgid">
				AND D.ORGID = #orgid#
			</isNotNull>
			
			<isNotNull prepend = "" property = "storeId">
				AND c.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND C.PART_ID = #partId#
			</isNotNull>
		
		  <!--AND D.BILL_STATUS_ID <> ''-->
			GROUP BY
				C.SOURCE_ID
		) E ON E.SOURCE_ID = A.ID
		WHERE 1 =1 
			  AND A.AUDIT_SIGN = 1
		      AND B.OUTABLE_QTY > 0
		      AND B.OUTABLE_QTY - IFNULL(E.SellQty, 0) > 0
		
			<isNotNull prepend = "" property = "orgid">
				AND A.ORGID = #orgid#
			</isNotNull>
			
			<isNotNull prepend = "" property = "storeId">
				AND B.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND B.PART_ID = #partId#
			</isNotNull>
			
		ORDER BY
			A.AUDIT_DATE
		

	
    </select>
    
    
    <select id="chooseEnterOutableDetail" parameterClass="java.util.HashMap" resultClass="java.util.HashMap"> 
		SELECT  b.ID as id, b.OUTABLE_QTY AS stockQty, ifnull(b.pre_out_qty,0) as preOutQty,
				B.MAIN_ID as mainId, B.STORE_ID as storeId, b.store_shelf as storeShelf, B.PART_ID as partId, 
        		B.PART_CODE as partCode, B.PART_NAME as partName, b.outable_qty * b.enter_price as stockAmt,
				B.FULL_NAME as fullName, B.ENTER_UNIT_ID as enterUnitId, B.SYSTEM_UNIT_ID as systemUnitId,
				B.ENTER_PRICE as enterPrice, a.bill_type_id as billTypeId, B.ENTER_DATE as enterDate,
				B.GUEST_ID as guestId,j.full_name as guestName,
				B.REMARK as remark, F.CODE AS code, F.NAME as name, F.OEM_CODE as oemCode,
				F.PART_BRAND_ID as partBrandId, F.APPLY_CAR_MODEL as applyCarModel,
				F.SPEC as spec, F.DIRECTION as direction, a.audit_date as auditDate, 
				<!--a.service_id as serviceId,-->
				'' as outSignQty,
				A.order_man as orderMan,
				B.id as sourceId,
				B.root_id as rootId,
				'' as partNameId,
				'' as pickType,
				a.service_id as serviceCode,
				A.`code` as enterCode
				
		FROM
			PJ_ENTER_MAIN_CHK A
		INNER JOIN PJ_ENTER_DETAIL_CHK B ON A.ID = B.MAIN_ID
		INNER JOIN WB_COMMON.COM_ATTRIBUTE F ON F.ID = B.PART_ID
		inner join WB_COMMON.COM_GUEST J ON b.origin_guest_id = J.ID
		WHERE 1 =1 
			  AND A.AUDIT_SIGN = 1
		      AND B.OUTABLE_QTY > 0
		      
		      <isNull prepend = "" property = "showAll">
				AND B.OUTABLE_QTY - IFNULL(b.pre_out_qty, 0) > 0
			 </isNull>
		
			<isNotNull prepend = "" property = "orgid">
				AND A.ORGID = #orgid#
			</isNotNull>
						
			<isNotNull prepend = "" property = "storeId">
				AND B.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "storeShelf">
				and b.store_shelf like '%$storeShelf$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND B.PART_ID = #partId#
			</isNotNull>
			
			
			<isNotNull prepend = "" property = "partCode">
				AND F.QUERY_CODE like '%$partCode$%' 
			</isNotNull>
			
			<isNotNull prepend = "" property = "partName">
				AND F.full_name like '%$partName$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "namePy">
				AND F.NAME_PY like '%$namePy$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "serviceId">
				AND a.code like '%$serviceId$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "applyCarModel">
				AND F.apply_car_model like '%$applyCarModel$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "partBrandId">
				AND F.part_brand_id = #partBrandId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partNameAndPY">
				and (F.QUERY_CODE like '%$partNameAndPY$%' or F.NAME like '%$partNameAndPY$%' or F.FULL_NAME like '%$partNameAndPY$%' or F.NAME_PY like '%$partNameAndPY$%')
			</isNotNull>
			
			 <!--入库日期 -->
            <isNotEmpty prepend="and" property="sEnterDate">A.enter_date &gt;= #sEnterDate#</isNotEmpty>
            <isNotEmpty prepend="and" property="eEnterDate">(A.enter_date &lt; #eEnterDate#)</isNotEmpty>
            
			<isNotNull prepend = "" property = "cartypeid">
				<isNotEqual prepend = "" property = "cartypeid" compareValue="0">
					and (F.CAR_TYPE_ID_F = #cartypeid# or F.CAR_TYPE_ID_S = #cartypeid# or F.CAR_TYPE_ID_T = #cartypeid#)
				</isNotEqual>
				
			</isNotNull>
			
			<isNotNull prepend = "" property = "guestId">
				<!--AND (A.GUEST_ID = #guestId# OR N.GUEST_ID = #guestId# )-->
				AND (b.origin_guest_id = #guestId#)
			</isNotNull>
		
			<!--可以按成本从高到低排序，可以按库存数量排序，可以按时间先后顺序排序-->
            <isNotEmpty prepend="order by" property="sortField">  
                $sortField$ $sortOrder$
            </isNotEmpty> 
		

	
    </select>
    
    <select id="chooseOutRtnableDetail" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT
		A.ID as id,
		A.MAIN_ID as mainId,
		A.SOURCE_ID as sourceId,
		A.ROOT_ID as rootId,
		A.STORE_ID as storeId,
		A.PART_ID as partId,
		A.PART_CODE as partCode,
		A.PART_NAME as partName,
		A.FULL_NAME as fullName,
		A.OUT_UNIT_ID as outUnitId,
		A.SYSTEM_UNIT_ID as systemUnitId,
		A.SELL_QTY as sellQty,
		A.SELL_PRICE as sellPrice,
		A.SELL_AMT as sellAmt,
		A.RTNABLE_QTY as rtnableQty,
		A.TAX_SIGN as taxSign,
		A.TAX_RATE as taxRate,
		A.TAX_PRICE as taxPrice,
		A.TAX_AMT as taxAmt,
		A.NO_TAX_PRICE as noTaxPrice,
		A.NO_TAX_AMT as noTaxAmt,
		A.TAX_DIFF as taxDiff,
		A.ENTER_PRICE as enterPrice,
		A.ENTER_AMT as enterAmt,
		A.OUT_TO_IN_QTY as outToInQty,
		A.ENTER_DATE as enterDate,
		A.PREV_DETAIL_ID as prevDetailId,
		A.ORDER_DETAIL_ID as orderDetailId,
		A.ORDER_MAIN_ID as orderMainId,
		A.GUEST_ID as guestId,
		A.GUEST_NAME as guestName,
		A.REMARK as remark,
		A.OCCUPY_QTY as occupyQty,
		A.STOCK_OUT_QTY as stockOutQty,
		a.origin_id as originId,
		a.origin_guest_id as originGuestId,
		B.SERVICE_ID as serviceId,
		B.OUT_DATE as outDate,
		B.AUDIT_DATE as auditDate,
		D.CODE AS code, D.NAME as name, D.OEM_CODE as oemCode,
		D.PART_BRAND_ID as partBrandId, D.APPLY_CAR_MODEL as carModelName,
		D.SPEC as spec, D.DIRECTION as direction
		FROM
			PJ_OUT_DETAIL_CHK A
		INNER JOIN PJ_OUT_MAIN_CHK B ON A.MAIN_ID = B.ID
		INNER JOIN WB_COMMON.COM_GUEST C ON B.GUEST_ID = C.ID
		INNER JOIN WB_COMMON.COM_ATTRIBUTE D ON A.PART_ID = D.ID
		where 1 = 1
			  and b.enter_type_id = '050202'
			  AND B.AUDIT_SIGN = 1
		      AND A.RTNABLE_QTY > 0
		
			<isNotNull prepend = "" property = "orgid">
				AND B.ORGID = #orgid#
			</isNotNull>
			
			<isNotNull prepend = "" property = "storeId">
				AND A.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND A.PART_ID = #partId#
			</isNotNull>
			
			
			<isNotNull prepend = "" property = "code">
				AND D.QUERY_CODE like '%$code$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "name">
				AND D.full_name like '%$name$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "namePy">
				AND D.NAME_PY like '%$namePy$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "applyCarModel">
				AND D.apply_car_model like '%$applyCarModel$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "partBrandId">
				AND D.part_brand_id = #partBrandId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "cnp">
				and (D.QUERY_CODE like '%$cnp$%' or D.NAME like '%$cnp$%' or D.FULL_NAME like '%$cnp$%' or D.NAME_PY like '%$cnp$%')
			</isNotNull>
			
			<isNotNull prepend = "" property = "cartypeid">
				<isNotEqual prepend = "" property = "cartypeid" compareValue="0">
					and (D.CAR_TYPE_ID_F = #cartypeid# or D.CAR_TYPE_ID_S = #cartypeid# or D.CAR_TYPE_ID_T = #cartypeid#)
				</isNotEqual>
			</isNotNull>
			
			<isNotNull prepend = "" property = "guestId">
				AND (B.GUEST_ID = #guestId# )
			</isNotNull>
		
    </select>
    
    <select id="getBalanceInvocing" parameterClass="java.util.HashMap" resultClass="commonj.sdo.DataObject"> 
		SELECT A.ID as id, A.DC as dc, A.ORGID as orgid, A.SERVICE_ID as serviceId, 
		       A.BILL_MAIN_ID as billMainId, A.BILL_DETAIL_ID as billDetailId, A.BILL_TYPE_ID as billTypeId, A.GUEST_ID as guestId, 
		       A.GUEST_NAME as guestName, A.PART_ID as partId, A.PART_CODE as partCode, A.PART_NAME as partName, A.QC_QTY as qcQty,
			   A.QC_PRICE as qcPrice, A.QC_AMT as qcAmt, A.QTY as qty, A.PRICE as price, A.AMT as amt, A.COST_PRICE as costPrice, 
			   A.COST_AMT as costAmt, A.BALA_QTY balaQty, A.BALA_PRICE as balaPrice, A.BALA_AMT as balaAmt, A.REMARK as remark, 
			   A.CREATOR_ID as creatorId, A.CREATOR as creator, A.CREATE_DATE as createDate, 
               A.OPERATOR_ID as operatorId, A.OPERATOR as operator, A.OPERATE_DATE as operateDate
               FROM PJ_INVOCING A
               where 1 = 1 and 
               A.ID = (select max(ID) from PJ_INVOCING B
               		 where 1 = 1 
               		 
				<isNotNull prepend = "" property = "orgid">
						AND B.ORGID = #orgid#					
				</isNotNull>
				
				<isNotNull prepend = "" property = "partId">
						AND B.PART_ID = #partId#					
				</isNotNull>
                
                
                )
		

	
    </select>
    
    <select id="getBalanceStoreInvocing" parameterClass="java.util.HashMap" resultClass="commonj.sdo.DataObject"> 
		SELECT A.ID as id, A.DC as dc, A.ORGID as orgid, A.STORE_ID as storeId, A.SERVICE_ID as serviceId, 
		       A.BILL_MAIN_ID as billMainId, A.BILL_DETAIL_ID as billDetailId, A.BILL_TYPE_ID as billTypeId, A.GUEST_ID as guestId, 
		       A.GUEST_NAME as guestName, A.PART_ID as partId, A.PART_CODE as partCode, A.PART_NAME as partName, A.QC_QTY as qcQty,
			   A.QC_PRICE as qcPrice, A.QC_AMT as qcAmt, A.QTY as qty, A.PRICE as price, A.AMT as amt, A.COST_PRICE as costPrice, 
			   A.COST_AMT as costAmt, A.BALA_QTY balaQty, A.BALA_PRICE as balaPrice, A.BALA_AMT as balaAmt, A.REMARK as remark, 
			   A.CREATOR_ID as creatorId, A.CREATOR as creator, A.CREATE_DATE as createDate, 
               A.OPERATOR_ID as operatorId, A.OPERATOR as operator, A.OPERATE_DATE as operateDate
               FROM PJ_STORE_INVOCING A
               where 1 = 1 and 
               A.ID = (select max(B.ID) from PJ_STORE_INVOCING B
               		 where 1 = 1 
               		 
                <isNotNull prepend = "" property = "orgid">
						AND B.ORGID = #orgid#					
				</isNotNull>
				
				<isNotNull prepend = "" property = "storeId">
						AND B.STORE_ID = #storeId#					
				</isNotNull>
				
				<isNotNull prepend = "" property = "partId">
						AND B.PART_ID = #partId#					
				</isNotNull>
                
                
                )
		

	
    </select>
    
    
    
    <update id="updateMainTableQTAXSC" parameterClass="java.util.HashMap" >
		UPDATE PJ_OUT_MAIN A set (A.TAX_AMT, A.NO_TAX_AMT, A.ENTER_AMT, A.OUT_AMT, A.OUT_QTY, A.OUT_ITEM, A.TAX_DIFF) = (
			SELECT SUM(B.TAX_AMT), SUM(B.NO_TAX_AMT), SUM(B.ENTER_AMT), SUM(B.SELL_AMT), SUM(B.SELL_QTY), COUNT(B.ID),
		         SUM(B.TAX_AMT) - SUM(B.NO_TAX_AMT)
			from PJ_OUT_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_OUT_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>
	
	<update id="updateMainTableQTACGC" parameterClass="java.util.HashMap" >
		UPDATE PJ_OUT_MAIN A set (A.TAX_AMT, A.NO_TAX_AMT, A.ENTER_AMT, A.OUT_AMT, A.OUT_QTY, A.OUT_ITEM, A.TAX_DIFF) = (
			SELECT SUM(B.TAX_AMT), SUM(B.NO_TAX_AMT), SUM(B.ENTER_AMT), SUM(B.SELL_AMT), SUM(B.SELL_QTY), COUNT(B.ID),
		         SUM(B.TAX_AMT) * A.TAX_RATE
			from PJ_OUT_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_OUT_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>


    <update id="updateMainTableQTACGR" parameterClass="java.util.HashMap" >
		UPDATE PJ_ENTER_MAIN A set (A.TAX_AMT, A.NO_TAX_AMT, A.ENTER_AMT, A.ENTER_QTY, A.ENTER_ITEM, A.TAX_DIFF) = (
			SELECT SUM(B.TAX_AMT), SUM(B.NO_TAX_AMT), SUM(B.ENTER_AMT), SUM(B.ENTER_QTY), COUNT(B.ID),
		         SUM(B.TAX_AMT) - SUM(B.NO_TAX_AMT)
			from PJ_ENTER_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_ENTER_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>
	
	<update id="updateMainTableQTAXSR" parameterClass="java.util.HashMap" >
		UPDATE PJ_ENTER_MAIN A set (A.TAX_AMT, A.NO_TAX_AMT, A.ENTER_AMT, A.ENTER_QTY, A.ENTER_ITEM, A.TAX_DIFF, A.SELL_RTN_AMT) = (
			SELECT SUM(B.TAX_AMT), SUM(B.NO_TAX_AMT), SUM(B.ENTER_AMT), SUM(B.ENTER_QTY), COUNT(B.ID),
		         SUM(B.TAX_AMT) - SUM(B.NO_TAX_AMT), SUM(B.RTN_AMT)
			from PJ_ENTER_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_ENTER_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>
	
	<update id="updateMainTableQTACGD" parameterClass="java.util.HashMap" >
		UPDATE PJ_PCHS_ORDER_MAIN A set (A.TAX_AMT, A.NO_TAX_AMT, A.ORDER_AMT, A.ORDER_QTY, A.ORDER_ITEM, A.TAX_DIFF) = (
			SELECT SUM(B.TAX_AMT), SUM(B.NO_TAX_AMT), SUM(B.ORDER_AMT), SUM(B.ORDER_QTY), COUNT(B.ID),
		         SUM(B.TAX_AMT) - SUM(B.NO_TAX_AMT)
			from PJ_PCHS_ORDER_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_PCHS_ORDER_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>
	
	
	<update id="updateMainTableQTAXSD" parameterClass="java.util.HashMap" >
		UPDATE PJ_SELL_ORDER_MAIN A set (A.ORDER_AMT, A.ORDER_QTY, A.ORDER_ITEM) = (
			SELECT SUM(B.ORDER_AMT), SUM(B.ORDER_QTY), COUNT(B.ID)
			from PJ_SELL_ORDER_DETAIL B
			where A.ID = B.MAIN_ID
			
				<isNotNull prepend = "" property = "mainId">
						AND B.MAIN_ID = #mainId#					
				</isNotNull>
				
			GROUP BY B.MAIN_ID
		)  
		WHERE EXISTS(
			SELECT 1 FROM PJ_SELL_ORDER_DETAIL B WHERE B.MAIN_ID = A.ID
		
			<isNotNull prepend = "" property = "mainId">
					AND B.MAIN_ID = #mainId#					
			</isNotNull>
		)
	</update>
	
	
	<select id="queryGuestEnterRtnableRecord" parameterClass="java.util.HashMap" resultClass="com.hsapi.part.data.pts.RtnRecord"> 
		SELECT a.id AS sourceId, CASE WHEN IFNULL(a.root_id,0) = 0 THEN a.id ELSE a.root_id END AS rootId,
		       b.id as mainId, b.service_id AS serviceId, b.guest_id AS guestId, a.part_id AS partId,
		       a.part_code AS partCode, a.part_name AS partName, a.full_name as fullName, a.enter_unit_id AS unitId,
		       a.outable_qty AS rtnableQty, a.tax_sign AS taxSign, a.tax_rate AS taxRate,
		       a.no_tax_price AS noTaxPrice, a.tax_price AS taxPrice, a.enter_price AS enterPrice,
			   a.enter_date AS enterDate, a.origin_id as originId, a.origin_guest_id as originGuestId
		FROM pj_enter_detail_chk a 
		inner  JOIN pj_enter_main_chk b 
			ON a.main_id = b.id
		WHERE 1 = 1 AND b.audit_sign = 1 
		      AND a.outable_qty > 0
		
		 	 <isNotNull prepend = "" property = "orgid">
	  		
	  		        AND b.orgid = #orgid# 
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "storeId">
	  		
	  		        AND a.store_id = #storeId# 
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "guestId">
	  		
	  		        AND (a.origin_guest_id = #guestId#)
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "partId">
	  		
	  		        AND a.part_id = #partId# 
					
			 </isNotNull>
			 
			 
	  	order by b.audit_date desc
					

    </select>
    
    <select id="queryGuestOutRtnableRecord" parameterClass="java.util.HashMap" resultClass="com.hsapi.part.data.pts.RtnRecord"> 
		SELECT a.ID AS sourceId, CASE WHEN IFNULL(a.root_id,0) = 0 THEN a.id ELSE a.root_id END AS rootId,
		       b.id as mainId, b.service_id AS serviceId, b.guest_id AS guestId, a.part_id AS partId,
		       a.part_code AS partCode, a.part_name AS partName, a.out_unit_id AS unitId,
		       a.rtnable_qty AS rtnableQty, a.tax_sign AS taxSign, a.tax_rate AS taxRate,
		       a.no_tax_price AS noTaxPrice, a.tax_price AS taxPrice, 
		       CASE WHEN a.tax_sign = 1 THEN a.tax_price ELSE a.no_tax_price end AS enterPrice,
			    a.enter_date AS enterDate, a.origin_id as originId, a.origin_guest_id as originGuestId
		FROM pj_out_detail_chk a
		INNER JOIN pj_out_main_chk b
		ON a.main_id = b.id
		WHERE 1 = 1 and b.audit_sign = 1
		      AND a.rtnable_qty > 0
		
		 	 <isNotNull prepend = "" property = "orgid">
	  		
	  		        AND b.orgid = #orgid# 
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "storeId">
	  		
	  		        AND a.store_id = #storeId# 
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "guestId">
	  		
	  		        AND (b.guest_id = #guestId#)
					
			 </isNotNull>
			 
			 <isNotNull prepend = "" property = "partId">
	  		
	  		        AND a.part_id = #partId# 
					
			 </isNotNull>
			 
			 
	  	order by b.audit_date desc
					

    </select>
	
	
	<select id="x_chooseEnterOutableDetail" parameterClass="java.util.HashMap" resultClass="java.util.HashMap"> 
		SELECT  b.ID as id, b.OUTABLE_QTY - IFNULL(E.SellQty, 0) AS outableQty,
				B.MAIN_ID as mainId, B.SOURCE_ID as sourceId, B.ROOT_ID as rootId, 
				B.STORE_ID as storeId, b.store_shelf as storeShelf, B.PART_ID as partId, B.PART_CODE as partCode, B.PART_NAME as partName,
				B.FULL_NAME as fullName, B.ENTER_UNIT_ID as enterUnitId, B.SYSTEM_UNIT_ID as systemUnitId,
				B.ENTER_QTY as enterQty, B.ENTER_PRICE as enterPrice,
				B.ENTER_AMT as enterAmt, B.OUTABLE_QTY as trueOutableQty, B.TAX_SIGN as taxSign,
				B.TAX_RATE as taxRate, B.TAX_PRICE as taxPrice, B.TAX_AMT as taxAmt,
				B.NO_TAX_PRICE as noTaxPrice, B.NO_TAX_AMT as noTaxAmt, B.TAX_DIFF as taxDiff,
				B.RTN_PRICE as rtnPrice, B.RTN_AMT as rtnAmt, B.ENTER_DATE as enterDate,
				B.PREV_DETAIL_ID as preDetailId, B.ORDER_DETAIL_ID as orderDetailId,
				B.ORDER_MAIN_ID as orderMainId, B.BRANCH_STOCK_AGE as branchStockAge,
				B.CHAIN_STOCK_AGE as chainStockAge, B.GUEST_ID as guestId,j.full_name as guestName,
				B.REMARK as remark, F.CODE AS code, F.NAME as name, F.OEM_CODE as oemCode,
				F.PART_BRAND_ID as partBrandId, F.APPLY_CAR_MODEL as carModelName,
				F.SPEC as spec, F.DIRECTION as direction, a.audit_date as auditDate, 
				a.service_id as serviceId, b.origin_id as originId, b.origin_guest_id as originGuestId
		FROM
			PJ_ENTER_MAIN_CHK A
		INNER JOIN PJ_ENTER_DETAIL_CHK B ON A.ID = B.MAIN_ID
		INNER JOIN WB_COMMON.COM_ATTRIBUTE F ON F.ID = B.PART_ID
		<!--INNER JOIN WB_COMMON.COM_GUEST K ON A.GUEST_ID = K.ID
		LEFT JOIN PJ_ENTER_DETAIL_CHK M ON M.ID = B.ROOT_ID
		LEFT JOIN PJ_ENTER_MAIN_CHK N ON N.ID = M.MAIN_ID
		LEFT JOIN WB_COMMON.COM_GUEST J ON N.GUEST_ID = J.ID-->
		inner join WB_COMMON.COM_GUEST J ON b.origin_guest_id = J.ID
		LEFT JOIN (
			SELECT
				C.SOURCE_ID,
				SUM(C.SELL_QTY) AS SellQty
			FROM
				PJ_OUT_DETAIL C
			INNER JOIN PJ_OUT_MAIN D ON C.MAIN_ID = D.ID
			INNER JOIN WB_COMMON.COM_ATTRIBUTE G ON G.ID = C.PART_ID
			WHERE 1 = 1 and D.AUDIT_SIGN = 0
			
			<isNotNull prepend = "" property = "orgid">
				<!--<isNotEqual prepend = "" property = "orgid" compareValue="0">-->
				AND D.ORGID = #orgid#
				<!--</isNotEqual>-->
			</isNotNull>
						
			<isNotNull prepend = "" property = "storeId">
				AND c.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND C.PART_ID = #partId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "code">
				AND G.QUERY_CODE like '%$code$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "name">
				AND G.full_name like '%$name$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "namePy">
				AND G.NAME_PY like '%$namePy$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "applyCarModel">
				AND G.apply_car_model like '%$applyCarModel$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "partBrandId">
				AND G.part_brand_id = #partBrandId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "cnp">
				and (G.QUERY_CODE like '%$cnp$%' or G.NAME like '%$cnp$%' or G.FULL_NAME like '%$cnp$%' or G.NAME_PY like '%$cnp$%')
			</isNotNull>
			
			<isNotNull prepend = "" property = "cartypeid">
				<isNotEqual prepend = "" property = "cartypeid" compareValue="0">
					and (G.CAR_TYPE_ID_F = #cartypeid# or G.CAR_TYPE_ID_S = #cartypeid# or G.CAR_TYPE_ID_T = #cartypeid#)
				</isNotEqual>
				
			</isNotNull>
		
		  <!--AND D.BILL_STATUS_ID <> ''-->
			GROUP BY
				C.SOURCE_ID
		) E ON E.SOURCE_ID = B.ID
		WHERE 1 =1 
			  AND A.AUDIT_SIGN = 1
		      AND B.OUTABLE_QTY > 0
		      AND B.OUTABLE_QTY - IFNULL(E.SellQty, 0) > 0
		
			<isNotNull prepend = "" property = "orgid">
				AND A.ORGID = #orgid#
			</isNotNull>
						
			<isNotNull prepend = "" property = "storeId">
				AND B.STORE_ID = #storeId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "partId">
				AND B.PART_ID = #partId#
			</isNotNull>
			
			
			<isNotNull prepend = "" property = "code">
				AND F.QUERY_CODE like '%$code$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "name">
				AND F.full_name like '%$name$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "namePy">
				AND F.NAME_PY like '%$namePy$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "applyCarModel">
				AND F.apply_car_model like '%$applyCarModel$%'
			</isNotNull>
			
			<isNotNull prepend = "" property = "partBrandId">
				AND F.part_brand_id = #partBrandId#
			</isNotNull>
			
			<isNotNull prepend = "" property = "cnp">
				and (F.QUERY_CODE like '%$cnp$%' or F.NAME like '%$cnp$%' or F.FULL_NAME like '%$cnp$%' or F.NAME_PY like '%$cnp$%')
			</isNotNull>
			
			<isNotNull prepend = "" property = "cartypeid">
				<isNotEqual prepend = "" property = "cartypeid" compareValue="0">
					and (F.CAR_TYPE_ID_F = #cartypeid# or F.CAR_TYPE_ID_S = #cartypeid# or F.CAR_TYPE_ID_T = #cartypeid#)
				</isNotEqual>
				
			</isNotNull>
			
			<isNotNull prepend = "" property = "guestId">
				<!--AND (A.GUEST_ID = #guestId# OR N.GUEST_ID = #guestId# )-->
				AND (b.origin_guest_id = #guestId#)
			</isNotNull>
			
		ORDER BY
			A.AUDIT_DATE
		

	
    </select>
	
	
	
	
	
</sqlMap>